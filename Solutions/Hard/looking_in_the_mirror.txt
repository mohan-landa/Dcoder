#include <bits/stdc++.h>
using namespace std;

struct node{
  int val;
  struct node *left,*right,*parent;
};
struct node* ptr,*temp = NULL;

struct node* createNode(int val){
  struct node* ptr;
  ptr = (struct node*)malloc(sizeof(struct node));
  ptr->val = val;
  ptr->left = NULL;
  ptr->right = NULL;
  ptr->parent = NULL;
  return ptr;
}

void inorder(int val,struct node* root){
  if(root->left!=NULL){
    inorder(val,root->left);
  }
  if(root->val==val){
    ptr = root;
    temp = root;
  }
  if(root->right!=NULL){
    inorder(val,root->right);
  }
}

int main(){
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n,q,x;
  cin >> n >> q >> x;
  struct node *root = NULL;
  root = createNode(x);
  for(int i=0;i<n;i++){
    int p,c;
    char ch;
    cin >> p >> c >> ch;
    inorder(p,root);
    struct node* ptr1 = createNode(c);
    if(ch=='L'){
      ptr->left = ptr1;
    }else{
      ptr->right = ptr1;
    }
    ptr1->parent = ptr;
  }
  temp = NULL;
  while(q--){
    int a;
    cin >> a;
    if(a==x){
      cout << a << endl;
    }else{
      inorder(a,root);
      if(temp==NULL){
        cout << "Not Exist";
      }else{
        stack<char> s;
        while(temp->parent!=NULL){
          if(temp->parent->left==temp){
            s.push('L');
          }else{
            s.push('R');
          }
          temp = temp->parent;
        }
        struct node* ans = root;
        int z = 0;
        while(!s.empty()){
          char ss = s.top();
          if(ss=='L'){
            if(ans->right!=NULL){
            ans = ans->right;
            }else{
              z = 1;
            }
          }else{
            if(ans->left!=NULL){
            ans = ans->left;
            }else{
              z = 1;
            }
          }
          s.pop();
        }
        if(z==1){
          cout << "Not Exist";
        }else{
          cout << ans->val;
        }
      }
      temp = NULL;
      cout << endl;
    }
  }
  return 0;
}